from __future__ import annotations

import os
import sqlite3
import tempfile
from pathlib import Path
from typing import List

from fastapi import FastAPI
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware

BASE_DIR: Path = Path(__file__).resolve().parent
WEB_DIR: Path = BASE_DIR / "web"
STATIC_DIR: Path = WEB_DIR / "static"
DATA_DIR: Path = BASE_DIR / "data"

STATIC_DIR.mkdir(parents=True, exist_ok=True)
DATA_DIR.mkdir(parents=True, exist_ok=True)

DB_PATH: Path | None = None

def _preferred_db_path() -> Path:
    env = os.getenv("DB_PATH")
    if env:
        return Path(env)
    return DATA_DIR / "glass.db"

def _init_db(db_path: Path) -> bool:
    try:
        db_path.parent.mkdir(parents=True, exist_ok=True)
        with sqlite3.connect(db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS meta (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            """)
            conn.execute("INSERT OR IGNORE INTO meta(key,value) VALUES(?,?)", ("schema", "1"))
            conn.commit()
        return True
    except Exception:
        return False

app = FastAPI(title="GlassServer", version="1.0.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
def on_startup() -> None:
    global DB_PATH
    cand = _preferred_db_path()
    if _init_db(cand):
        DB_PATH = cand
        return
    tmp_cand = Path(tempfile.gettempdir()) / "glass.db"
    if _init_db(tmp_cand):
        DB_PATH = tmp_cand
        return
    DB_PATH = None

app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")

@app.get("/healthz")
def healthz():
    info = {
        "status": "ok" if DB_PATH else "degraded",
        "db_path": str(DB_PATH) if DB_PATH else None,
        "static_dir_exists": STATIC_DIR.exists(),
        "static_dir": str(STATIC_DIR),
        "version": "1.0.0",
    }
    if DB_PATH is None:
        info["error"] = "DB not initialized (no writable path)"
    return JSONResponse(info)

@app.get("/")
def root():
    index_html = WEB_DIR / "index.html"
    if index_html.is_file():
        return FileResponse(index_html, media_type="text/html")
    return JSONResponse({"app": "GlassServer", "ok": True, "hint": "Place an index.html under GlassServer/web/ to serve it at /"})

@app.get("/static-list")
def static_list():
    files: List[str] = [
        str(p.relative_to(STATIC_DIR)).replace("\\", "/")
        for p in STATIC_DIR.rglob("*") if p.is_file()
    ]
    return JSONResponse({"count": len(files), "files": files})

# Placeholders (keep commented until implemented to avoid boot errors)
# from fastapi import APIRouter
# license_router = APIRouter()
# @license_router.post("/issue")    def issue_license(payload: dict):    return {"ok": True}
# @license_router.post("/activate") def activate_license(payload: dict): return {"ok": True}
# @license_router.post("/validate") def validate_license(payload: dict): return {"ok": True}
# app.include_router(license_router, prefix="/license", tags=["license"])
# webhook_router = APIRouter()
# @webhook_router.post("") def gumroad_webhook(payload: dict): return {"ok": True}
# app.include_router(webhook_router, prefix="/gumroad/webhook", tags=["webhook"])
